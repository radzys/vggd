import numpy as np
from numba import njit
import pickle

def cf_calc(cf, u, x, dy, nu, u0, ni):
    for i in range(ni):
        cf[i] = 2 * nu / (u0 ** 2) * ((u[i + 1, 2] - u[i + 1, 1]) / dy)
    with open('data\cf_nav.plt', 'w') as file:
        for i in range(1, ni):
            file.write(f'{x[i + 1, 1]} {cf[i]}\n')

@njit
def boundary(u, v, p, u0, d, ni, nj):
    for j in range(nj + 1):
        if y_cell[1, j] <= d:
            u[0, j] = u0
        else:
            u[0, j] = u0 / 10.0
    v[0, :] = 0.0
    p[0, :] = p[1, :]

    u[ni, :] = u[ni - 1, :]
    v[ni, :] = v[ni - 1, :]
    p[ni, :] = 0.0

    u[:, 0] = - u[:, 1]
    v[:, 0] = - v[:, 1]
    p[:, 0] = p[:, 1]

    u[:, nj] = u0 / 10.0
    v[:, nj] = v[:, nj - 1]
    p[:, nj] = p[:, nj - 1]


@njit
def navier(ni, nj, u0, nu, dx, dy, eps, max_k, u, v, p, u_old, v_old, p_old, res_u, res_v, res_p, reses, out, d):
    res_u_max = 1.0
    res_v_max = 1.0
    res_p_max = 1.0
    k = 1
    boundary(u, v, p, u0, d, ni, nj)
    a = 1.0 / (u0**2)
    dt = cfl * min(0.5 * dx ** 2 / nu, 0.5 * dy ** 2 / nu, dx / u0)
    while k <= max_k and (res_u_max >= eps or res_v_max >= eps or res_p_max >= eps):
        print(k)
        boundary(u, v, p, u0, d, ni, nj)
        u_old[1:ni][1:nj] = u[1:ni][1:nj]
        v_old[1:ni][1:nj] = v[1:ni][1:nj]
        p_old[1:ni][1:nj] = p[1:ni][1:nj]

        for i in range(1, ni):
            for j in range(1, nj):
                u_per1 = (u[i][j] + u[i + 1][j])/2
                if u_per1 >= 0.0:
                    u_r = u[i][j]
                    v_r = v[i][j]
                    p_r = p[i + 1][j]
                else:
                    u_r = u[i + 1][j]
                    v_r = v[i + 1][j]
                    p_r = p[i][j]

                u_per2 = (u[i - 1][j] + u[i][j])/2
                if u_per2 >= 0.0:
                    u_l = u[i - 1][j]
                    v_l = v[i - 1][j]
                    p_l = p[i][j]
                else:
                    u_l = u[i][j]
                    v_l = v[i][j]
                    p_l = p[i - 1][j]

                v_per1 = (v[i][j] + v[i][j + 1])/2
                if v_per1 >= 0.0:
                    u_u = u[i][j]
                    v_u = v[i][j]
                    p_u = p[i][j + 1]
                else:
                    u_u = u[i][j + 1]
                    v_u = v[i][j + 1]
                    p_u = p[i][j]

                v_per2 = (v[i][j - 1] + v[i][j])/2
                if v_per2 >= 0.0:
                    u_d = u[i][j - 1]
                    v_d = v[i][j - 1]
                    p_d = p[i][j]
                else:
                    u_d = u[i][j]
                    v_d = v[i][j]
                    p_d = p[i][j - 1]

                conv1 = (u_r - u_l) / dx
                conv2 = (v_u - v_d) / dy
                p[i][j] = p[i][j] + dt / a * (- conv1 - conv2)

                conv1 = (u_per1 * u_r - u_per2 * u_l) / dx
                conv2 = (v_per1 * u_u - v_per2 * u_d) / dy
                p1 = (p_r - p_l) / dx
                diff1 = nu / (dx**2) * (u[i + 1][j] - 2 * u[i][j] + u[i - 1][j])
                diff2 = nu / (dy**2) * (u[i][j + 1] - 2 * u[i][j] + u[i][j - 1])
                u[i][j] = u[i][j] + dt * (- conv1 - conv2 - p1 + diff1 + diff2)

                conv1 = (u_per1 * v_r - u_per2 * v_l) / dx
                conv2 = (v_per1 * v_u - v_per2 * v_d) / dy
                p1 = (p_u - p_d) / dx
                diff1 = nu / (dx**2) * (v[i + 1][j] - 2 * v[i][j] + v[i - 1][j])
                diff2 = nu / (dy**2) * (v[i][j + 1] - 2 * v[i][j] + v[i][j - 1])
                v[i][j] = v[i][j] + dt * (- conv1 - conv2 - p1 + diff1 + diff2)

                res_p[i][j] = abs(p[i][j] - p_old[i][j]) * a / dt
                res_u[i][j] = abs(u[i][j] - u_old[i][j]) / dt
                res_v[i][j] = abs(v[i][j] - v_old[i][j]) / dt

        res_u_max = 0
        res_v_max = 0
        res_p_max = 0
        for i in range(2, ni):
            for j in range(2, nj):
                if res_u[i][j] >= res_u_max:
                    res_u_max = res_u[i][j]
                if res_v[i][j] >= res_v_max:
                    res_v_max = res_v[i][j]
                if res_p[i][j] >= res_p_max:
                    res_p_max = res_p[i][j]
        boundary(u, v, p, u0, d, ni, nj)
        out = [k, res_u_max, res_v_max, res_p_max]
        reses[k, :] = out
        k += 1


# with open('input_nav.txt', 'r') as inp:
#     L = float(inp.readline())
#     H = float(inp.readline())
#     d = float(inp.readline())
#     u0 = float(inp.readline())
#     nu = float(inp.readline())
#     ni = int(inp.readline())
#     nj = int(inp.readline())
#     eps = float(inp.readline())
#     max_k = int(inp.readline())
#     cfl = float(inp.readline())

ni = 300
nj = 300
L = 6.0
H = 6.0
u0 = 1.0
nu = 0.01
eps = 1e-10
max_k = 100000
cfl = 0.2
d = 0.7

x_node = np.zeros((ni + 1, nj + 1), dtype='float64')
y_node = np.zeros((ni + 1, nj + 1), dtype='float64')
x_cell = np.zeros((ni + 1, nj + 1), dtype='float64')
y_cell = np.zeros((ni + 1, nj + 1), dtype='float64')
u = np.zeros((ni + 1, nj + 1), dtype='float64')
v = np.zeros((ni + 1, nj + 1), dtype='float64')
p = np.zeros((ni + 1, nj + 1), dtype='float64')
u_old = np.zeros((ni + 1, nj + 1), dtype='float64')
v_old = np.zeros((ni + 1, nj + 1), dtype='float64')
p_old = np.zeros((ni + 1, nj + 1), dtype='float64')
res_u = np.zeros((ni + 1, nj + 1), dtype='float64')
res_v = np.zeros((ni + 1, nj + 1), dtype='float64')
res_p = np.zeros((ni + 1, nj + 1), dtype='float64')
cf = np.zeros(ni, dtype='float64')
reses = np.zeros((max_k, 4), dtype='float64')
out = np.zeros((1, 4), dtype='float64')

dx = L / (ni - 1)
dy = H / (nj - 1)

for i in range(1, ni + 1):
    for j in range(1, nj + 1):
        x_node[i, j] = (i - 1) * dx
        y_node[i, j] = (j - 1) * dy

for i in range(1, ni + 1):
    for j in range(1, nj + 1):
        x_cell[i, j] = (2 * i - 1) * dx / 2
        y_cell[i, j] = (2 * j - 1) * dy / 2

for i in range(1, ni + 1):
    for j in range(1, nj + 1):
        if y_cell[i, j] <= d:
            u[i, j] = u0
        else:
            u[i, j] = u0/10.0

navier(ni, nj, u0, nu, dx, dy, eps, max_k, u, v, p, u_old, v_old, p_old, res_u, res_v, res_p, reses, out, d)
cf_calc(cf, u, x_node, dy, nu, u0, ni)

with open(r'data\res_nav.plt', 'w') as file:
    for i in range(1, max_k):
        file.write((' '.join(map(str, reses[i, :]))) + '\n')

with open('data_nav.plt', 'w') as file:
    file.write('VARIABLES="X", "Y", "U", "V", "P"\n')
    file.write(f'ZONE I={ni}, J={nj}, DATAPACKING=BLOCK, VARLOCATION=([3-20]=CELLCENTERED)\n')
    for j in range(1, nj + 1):
        file.write((' '.join(map(str, x_node[1:ni + 1, j]))) + '\n')
    for j in range(1, nj + 1):
        file.write((' '.join(map(str, y_node[1:ni + 1, j]))) + '\n')
    for j in range(1, nj):
        file.write((' '.join(map(str, u[1:ni, j]))) + '\n')
    for j in range(1, nj):
        file.write((' '.join(map(str, v[1:ni, j]))) + '\n')
    for j in range(1, nj):
        file.write((' '.join(map(str, p[1:ni, j]))) + '\n')

with open(r'data\xnodes_nav.pickle', 'wb') as file:
    pickle.dump(x_node, file)
with open(r'data\ynodes_nav.pickle', 'wb') as file:
    pickle.dump(y_node, file)
with open(r'data\us_nav.pickle', 'wb') as file:
    pickle.dump(u, file)
with open(r'data\vs_nav.pickle', 'wb') as file:
    pickle.dump(v, file)


dots = [0.5, 1.5, 2.5]
# dots = [1.5]
for dot in dots:
    # file_name = rf'data\200_nav_graf{"_".join(str(dot).split("."))}.txt'
    file_name = rf'data\nav_graf{"_".join(str(dot).split("."))}.txt'
    with open(file_name, 'w') as file:
        for i in range(len(x_node[:, 1])):
            if abs(x_node[i][1] - dot) <= dx / 2:
                for j in range(len(u[i][:])):
                    file.write(f'{y_node[i][j]} {u[i][j]}\n')

print('Done!')
